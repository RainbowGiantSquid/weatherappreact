{"version":3,"sources":["logo.svg","components/input/index.jsx","components/form/index.jsx","components/constants/index.js","components/card/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Input","props","react_default","a","createElement","Object","assign","className","value","placeholder","type","onChange","_","name","id","Form","onSubmit","children","API_KEY","Card","city","weatherData","main","temp","weather","description","App","state","loading","error","event","_this","setState","defineProperty","target","preventDefault","console","log","fetch","concat","then","response","ok","json","src","logo","alt","components_form","this","components_input","disabled","components_card","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4RCgBzBC,eAbD,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACEC,UAAU,QACVC,MAAOP,EAAMO,MACbC,YAAaR,EAAMQ,YACnBC,KAAMT,EAAMS,MAAQ,OACpBC,SAAUV,EAAMU,UAAa,SAAAC,GAAC,OAAI,MAClCC,KAAMZ,EAAMY,KACZC,GAAIb,EAAMa,IACNb,MCROc,EAFF,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,QAAMY,SAAUf,EAAMe,UAAWf,EAAMgB,WCFhDC,EAAU,mCCWRC,SARF,SAAAlB,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,+BAAuBH,EAAMmB,MAC7BlB,EAAAC,EAAAC,cAAA,SAAIH,EAAMoB,YAAYC,KAAKC,MAC3BrB,EAAAC,EAAAC,cAAA,SAAIH,EAAMoB,YAAYG,QAAQ,GAAGC,gBC4DtBC,6MA1DbC,MAAQ,CACNP,KAAM,GACNQ,SAAS,EACTC,MAAO,QAETlB,SAAW,SAAAmB,GACTC,EAAKC,SAAL3B,OAAA4B,EAAA,EAAA5B,CAAA,GACGyB,EAAMI,OAAOpB,GAAKgB,EAAMI,OAAO1B,WAGpCQ,SAAW,SAAAc,GACTA,EAAMK,iBACNC,QAAQC,IAAI,mBAAoBN,EAAKJ,MAAMP,MAC3CkB,MAAK,qDAAAC,OAEDR,EAAKJ,MAAMP,KAFV,WAAAmB,OAGOrB,IAETsB,KAAK,SAAAC,GACJ,OAAKA,EAASC,GAKPD,EAASE,OAJPF,EACJE,OACAH,KAAK,SAAAG,GAAI,OAAIZ,EAAKC,SAAS,CAAEH,MAAOc,EAAMf,SAAS,QAIzDY,KAAK,SAAAG,GACJZ,EAAKC,SAAS,CAAEX,YAAasB,EAAMf,SAAS,+EAKhD,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,OAAKwC,IAAKC,IAAMtC,UAAU,WAAWuC,IAAI,SACzC5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAM/B,SAAUgC,KAAKhC,UACnBd,EAAAC,EAAAC,cAAC6C,EAAD,CACEtC,SAAUqC,KAAKrC,SACfH,MAAOwC,KAAKrB,MAAMP,KAClBX,YAAY,cACZK,GAAG,SAELZ,EAAAC,EAAAC,cAAC6C,EAAD,CACEC,SAAUF,KAAKrB,MAAMC,UAAYoB,KAAKrB,MAAMP,KAC5CV,KAAK,YAGRsC,KAAKrB,MAAMN,aACVnB,EAAAC,EAAAC,cAAC+C,EAAD,CAAM/B,KAAM4B,KAAKrB,MAAMP,KAAMC,YAAa2B,KAAKrB,MAAMN,cAEtD2B,KAAKrB,MAAME,OAAS3B,EAAAC,EAAAC,cAAA,oDApDbgD,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.a094ef89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./input.css\";\n\nconst Input = props => (\n  <input\n    className=\"input\"\n    value={props.value}\n    placeholder={props.placeholder}\n    type={props.type || \"text\"}\n    onChange={props.onChange || (_ => null)}\n    name={props.name}\n    id={props.id}\n    {...props}\n  />\n);\n\nexport default Input;\n","import React from \"react\";\n\nconst Form = props => <form onSubmit={props.onSubmit}>{props.children}</form>;\n\nexport default Form;\n","export const API_KEY = \"de0e5610ff9a85b1c3e2e626aebfcaa4\";\n","import React from \"react\";\nimport \"./card.css\";\n\nconst Card = props => (\n  <div className=\"weather-card\">\n    <p>Current weather in {props.city}</p>\n    <p>{props.weatherData.main.temp}</p>\n    <p>{props.weatherData.weather[0].description}</p>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport Form from \"./components/form\";\nimport { API_KEY } from \"./components/constants\";\nimport Card from \"./components/card\";\n\nclass App extends React.Component {\n  state = {\n    city: \"\",\n    loading: false,\n    error: null\n  };\n  onChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  };\n  onSubmit = event => {\n    event.preventDefault();\n    console.log(\"searching for...\", this.state.city);\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.city\n      }&APPID=${API_KEY}`\n    )\n      .then(response => {\n        if (!response.ok) {\n          return response\n            .json()\n            .then(json => this.setState({ error: json, loading: false }));\n        }\n        return response.json();\n      })\n      .then(json => {\n        this.setState({ weatherData: json, loading: false });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Form onSubmit={this.onSubmit}>\n            <Input\n              onChange={this.onChange}\n              value={this.state.city}\n              placeholder=\"type a city\"\n              id=\"city\"\n            />\n            <Input\n              disabled={this.state.loading || !this.state.city}\n              type=\"submit\"\n            />\n          </Form>\n          {this.state.weatherData && (\n            <Card city={this.state.city} weatherData={this.state.weatherData} />\n          )}\n          {this.state.error && <p>Oh no! Something went wrong...</p>}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}